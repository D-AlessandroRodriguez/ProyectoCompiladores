?start: instruccion+ 
?instruccion: impresion | declarar | asignacion ";" | decision | ciclo | TREE
 
TREE: "Tree()"

//repeticion
ciclo: forloop | whileloop | dowhile 
forloop: "for" "(" asignacion ";" condicion ";" asignacion ")" bloque ";"
whileloop: "while" "(" condicion ")" bloque ";" 
dowhile: "do" bloque "while" "(" condicion ")" ";" 

//aqui se declara el if
decision: ifstatement
ifstatement: "if" "(" (condicion|BOOL)")" bloque elifparte? elseparte? ";" 
elifparte: ("elif" "(" (condicion|BOOL) ")" bloque)* 
elseparte: "else" bloque 

condicion: termino((OPERADORCOMP | OPERADORLOG)termino)* 
bloque: "{" start "}" 
//

//se declara varibales y se inicializa
declarar: TIPOVARIABLE VARNAME ("=" expresion)? ";"

//se imprime 
impresion: "out" "(" expresion ")" ";"

//asignacion entre variables y expresion
asignacion: VARNAME "=" expresion 

//se define una expresion, termino y los valores
expresion: termino (OPERADOR termino)*
?termino: VARNAME | valor | "(" expresion ")"
valor: INT -> entero | FLOAT -> decimal | BOOL -> booleano | STRING -> cadena

//objetos terminales
TIPOVARIABLE: "int" | "float" | "string" | "bool"
//PRINT: "out"
BOOL: "TRUE" | "FALSE"
OPERADOR: "+" | "-" | "*" | "/"
OPERADORCOMP: ">=" | "<=" | "==" | "!=" | "<" | ">"
OPERADORLOG: "&&" | "||" | "AND" | "OR"

STRING: /"[^"\n]*"/
FLOAT: /(([1-9]([0-9]+)*)|0)\.([0-9]+)/
INT: /[0-9]+/

VARNAME: /(?!int|float|string|bool|AND|OR|TRUE|FALSE|Tree())[a-zA-Z_][a-zA-Z0-9_]*/

COMMENT: /\/\*([\s\S]*?)\*\//

%import common.WS
%ignore WS
%ignore COMMENT